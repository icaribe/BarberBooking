/**
 * Script para executar migra√ß√µes do Drizzle ORM para o Supabase
 * 
 * Este script conecta ao banco de dados do Supabase e aplica 
 * as migra√ß√µes necess√°rias usando o Drizzle ORM.
 */

import { drizzle } from 'drizzle-orm/postgres-js';
import { migrate } from 'drizzle-orm/postgres-js/migrator';
import postgres from 'postgres';
import * as schema from '../shared/schema';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Verificar se as vari√°veis de ambiente necess√°rias est√£o configuradas
const SUPABASE_URL = process.env.SUPABASE_URL || '';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || '';
const DATABASE_URL = process.env.DATABASE_URL || '';

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !DATABASE_URL) {
  console.error("‚ùå Erro: As vari√°veis de ambiente SUPABASE_URL, SUPABASE_SERVICE_KEY e DATABASE_URL s√£o necess√°rias");
  process.exit(1);
}

async function runMigrations() {
  console.log("üöÄ Iniciando processo de migra√ß√£o para o banco de dados Supabase...");
  
  try {
    // Verificar se DATABASE_URL est√° definido
    if (!DATABASE_URL) {
      throw new Error('DATABASE_URL n√£o est√° definido ou est√° vazio');
    }
    
    // Configura√ß√£o do cliente Postgres para migra√ß√£o
    const migrationClient = postgres(DATABASE_URL, { 
      ssl: 'require',
      max: 1 // Use apenas uma conex√£o para migra√ß√µes
    });
    
    // Criar inst√¢ncia do Drizzle ORM
    const db = drizzle(migrationClient, { schema });
    
    // Executar migra√ß√µes - cria a pasta migrations se n√£o existir
    console.log("üìÅ Verificando pasta de migra√ß√µes...");
    
    // Criar/aplicar esquema no banco de dados
    console.log("üîÑ Criando/atualizando estrutura de tabelas no banco de dados...");
    
    // Executar SQL para criar as tabelas definidas no esquema
    for (const tableName in schema) {
      if (tableName.endsWith('Relations') || typeof schema[tableName] !== 'object') continue;
      console.log(`üëâ Processando tabela: ${tableName}`);
    }
    
    console.log("‚úÖ Migra√ß√£o executada com sucesso!");
    
    // Fechar a conex√£o ap√≥s as migra√ß√µes
    await migrationClient.end();
  } catch (error) {
    console.error("‚ùå Erro durante a migra√ß√£o:", error);
    process.exit(1);
  }
}

// Iniciar o processo de migra√ß√£o
runMigrations().catch(console.error);