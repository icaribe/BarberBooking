/**
 * Script para configurar pol√≠ticas de RLS (Row Level Security) no Supabase
 * 
 * Este script estabelece pol√≠ticas de seguran√ßa adequadas para proteger
 * os dados com base em regras de autentica√ß√£o e autoriza√ß√£o.
 */

import supabase from '../server/supabase';
import dotenv from 'dotenv';
import postgres from 'postgres';

// Carregar vari√°veis de ambiente
dotenv.config();

// Verificar se as vari√°veis de ambiente necess√°rias est√£o configuradas
const SUPABASE_URL = process.env.SUPABASE_URL || '';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || '';
const DATABASE_URL = process.env.DATABASE_URL || '';

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !DATABASE_URL) {
  console.error("‚ùå Erro: As vari√°veis de ambiente SUPABASE_URL, SUPABASE_SERVICE_KEY e DATABASE_URL s√£o necess√°rias");
  process.exit(1);
}

// Fun√ß√£o para executar SQL diretamente
async function executeSQL(sql: string, params: any[] = []): Promise<any> {
  // Verificar se DATABASE_URL est√° definido
  if (!DATABASE_URL) {
    throw new Error('DATABASE_URL n√£o est√° definido ou est√° vazio');
  }
  
  // Criar cliente SQL
  const client = postgres(DATABASE_URL, { 
    ssl: 'require',
    max: 1
  });
  
  try {
    const result = await client.query(sql, ...params);
    return result;
  } catch (error) {
    console.error(`Erro ao executar SQL: ${sql}`, error);
    throw error;
  } finally {
    await client.end();
  }
}

// Configurar Row Level Security para uma tabela
async function setupRLSForTable(tableName: string, enableRLS: boolean = true): Promise<void> {
  try {
    console.log(`\nüîí Configurando RLS para tabela: ${tableName}`);
    
    // Habilitar ou desabilitar RLS na tabela
    const action = enableRLS ? 'ENABLE' : 'DISABLE';
    await executeSQL(`ALTER TABLE "${tableName}" ${action} ROW LEVEL SECURITY;`);
    
    if (enableRLS) {
      console.log(`‚úÖ RLS habilitado para tabela: ${tableName}`);
    } else {
      console.log(`‚ö†Ô∏è RLS desabilitado para tabela: ${tableName}`);
      return;
    }
    
    // Remover pol√≠ticas existentes para a tabela
    await removeExistingPolicies(tableName);
    
    // Aplicar pol√≠ticas espec√≠ficas baseadas no nome da tabela
    switch (tableName) {
      case 'users':
        await setupUsersPolicies(tableName);
        break;
      case 'service_categories':
        await setupPublicReadPolicies(tableName);
        break;
      case 'services':
        await setupPublicReadPolicies(tableName);
        break;
      case 'professionals':
        await setupPublicReadPolicies(tableName);
        break;
      case 'schedules':
        await setupSchedulesPolicies(tableName);
        break;
      case 'appointments':
        await setupAppointmentsPolicies(tableName);
        break;
      case 'appointment_services':
        await setupAppointmentServicesPolicies(tableName);
        break;
      case 'product_categories':
        await setupPublicReadPolicies(tableName);
        break;
      case 'products':
        await setupPublicReadPolicies(tableName);
        break;
      case 'loyalty_rewards':
        await setupPublicReadPolicies(tableName);
        break;
      case 'loyalty_history':
        await setupLoyaltyHistoryPolicies(tableName);
        break;
      case 'cash_flow':
        await setupAdminOnlyPolicies(tableName);
        break;
      case 'professional_services':
        await setupPublicReadPolicies(tableName);
        break;
      default:
        console.log(`‚ö†Ô∏è Pol√≠ticas padr√£o aplicadas para tabela: ${tableName}`);
        await setupDefaultPolicies(tableName);
    }
    
    console.log(`‚úÖ Pol√≠ticas RLS configuradas para tabela: ${tableName}`);
  } catch (error) {
    console.error(`‚ùå Erro ao configurar RLS para ${tableName}:`, error);
    throw error;
  }
}

// Remover todas as pol√≠ticas existentes para uma tabela
async function removeExistingPolicies(tableName: string): Promise<void> {
  try {
    const policies = await executeSQL(`
      SELECT policyname FROM pg_policies 
      WHERE tablename = $1 AND schemaname = 'public'
    `, [tableName]);
    
    for (const policy of policies) {
      await executeSQL(`DROP POLICY IF EXISTS "${policy.policyname}" ON "${tableName}";`);
      console.log(`üóëÔ∏è Pol√≠tica removida: ${policy.policyname}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao remover pol√≠ticas existentes para ${tableName}:`, error);
    throw error;
  }
}

// Configurar pol√≠ticas para usu√°rios
async function setupUsersPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para que usu√°rios possam visualizar apenas seus pr√≥prios dados
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem ler seus pr√≥prios dados" ON "${tableName}"
    FOR SELECT
    USING (auth.uid() = id);
  `);
  
  // Pol√≠tica para que usu√°rios possam atualizar apenas seus pr√≥prios dados
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem atualizar seus pr√≥prios dados" ON "${tableName}"
    FOR UPDATE
    USING (auth.uid() = id);
  `);
  
  // Pol√≠tica para que administradores possam visualizar todos os usu√°rios
  await executeSQL(`
    CREATE POLICY "Administradores podem ler todos os dados" ON "${tableName}"
    FOR SELECT
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  // Pol√≠tica para que administradores possam atualizar todos os usu√°rios
  await executeSQL(`
    CREATE POLICY "Administradores podem atualizar todos os dados" ON "${tableName}"
    FOR UPDATE
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas para leitura p√∫blica
async function setupPublicReadPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para leitura p√∫blica
  await executeSQL(`
    CREATE POLICY "Leitura p√∫blica" ON "${tableName}"
    FOR SELECT
    TO PUBLIC
    USING (true);
  `);
  
  // Pol√≠tica para que administradores possam modificar
  await executeSQL(`
    CREATE POLICY "Administradores podem modificar" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas de leitura p√∫blica configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas para agendamentos
async function setupSchedulesPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para leitura p√∫blica de hor√°rios
  await executeSQL(`
    CREATE POLICY "Leitura p√∫blica de hor√°rios" ON "${tableName}"
    FOR SELECT
    TO PUBLIC
    USING (true);
  `);
  
  // Pol√≠tica para que profissionais possam atualizar seus hor√°rios
  await executeSQL(`
    CREATE POLICY "Profissionais podem atualizar seus hor√°rios" ON "${tableName}"
    FOR UPDATE
    USING (
      professional_id = (SELECT id FROM professionals WHERE user_id = auth.uid())
    );
  `);
  
  // Pol√≠tica para que administradores possam modificar todos os hor√°rios
  await executeSQL(`
    CREATE POLICY "Administradores podem modificar todos os hor√°rios" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas para agendamentos
async function setupAppointmentsPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para que usu√°rios possam ler seus pr√≥prios agendamentos
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem ler seus pr√≥prios agendamentos" ON "${tableName}"
    FOR SELECT
    USING (user_id = auth.uid());
  `);
  
  // Pol√≠tica para que usu√°rios possam criar seus pr√≥prios agendamentos
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem criar seus pr√≥prios agendamentos" ON "${tableName}"
    FOR INSERT
    WITH CHECK (user_id = auth.uid());
  `);
  
  // Pol√≠tica para que usu√°rios possam atualizar seus pr√≥prios agendamentos
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem atualizar seus pr√≥prios agendamentos" ON "${tableName}"
    FOR UPDATE
    USING (user_id = auth.uid());
  `);
  
  // Pol√≠tica para que profissionais possam ler agendamentos destinados a eles
  await executeSQL(`
    CREATE POLICY "Profissionais podem ler seus agendamentos" ON "${tableName}"
    FOR SELECT
    USING (
      professional_id = (SELECT id FROM professionals WHERE user_id = auth.uid())
    );
  `);
  
  // Pol√≠tica para que profissionais possam atualizar agendamentos destinados a eles
  await executeSQL(`
    CREATE POLICY "Profissionais podem atualizar seus agendamentos" ON "${tableName}"
    FOR UPDATE
    USING (
      professional_id = (SELECT id FROM professionals WHERE user_id = auth.uid())
    );
  `);
  
  // Pol√≠tica para que administradores possam ler e modificar todos os agendamentos
  await executeSQL(`
    CREATE POLICY "Administradores t√™m acesso completo aos agendamentos" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas para servi√ßos de agendamentos
async function setupAppointmentServicesPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para que usu√°rios possam ler seus pr√≥prios servi√ßos de agendamento
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem ler seus pr√≥prios servi√ßos de agendamento" ON "${tableName}"
    FOR SELECT
    USING (
      appointment_id IN (
        SELECT id FROM appointments WHERE user_id = auth.uid()
      )
    );
  `);
  
  // Pol√≠tica para que usu√°rios possam criar seus pr√≥prios servi√ßos de agendamento
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem criar seus pr√≥prios servi√ßos de agendamento" ON "${tableName}"
    FOR INSERT
    WITH CHECK (
      appointment_id IN (
        SELECT id FROM appointments WHERE user_id = auth.uid()
      )
    );
  `);
  
  // Pol√≠tica para que profissionais possam ler servi√ßos de agendamentos destinados a eles
  await executeSQL(`
    CREATE POLICY "Profissionais podem ler servi√ßos de seus agendamentos" ON "${tableName}"
    FOR SELECT
    USING (
      appointment_id IN (
        SELECT id FROM appointments WHERE professional_id = (
          SELECT id FROM professionals WHERE user_id = auth.uid()
        )
      )
    );
  `);
  
  // Pol√≠tica para que administradores possam ler e modificar todos os servi√ßos de agendamentos
  await executeSQL(`
    CREATE POLICY "Administradores t√™m acesso completo aos servi√ßos de agendamentos" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas para hist√≥rico de fidelidade
async function setupLoyaltyHistoryPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para que usu√°rios possam ler seu pr√≥prio hist√≥rico de fidelidade
  await executeSQL(`
    CREATE POLICY "Usu√°rios podem ler seu pr√≥prio hist√≥rico de fidelidade" ON "${tableName}"
    FOR SELECT
    USING (user_id = auth.uid());
  `);
  
  // Pol√≠tica para que administradores possam ler e modificar todo o hist√≥rico de fidelidade
  await executeSQL(`
    CREATE POLICY "Administradores t√™m acesso completo ao hist√≥rico de fidelidade" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas somente para administradores
async function setupAdminOnlyPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para que administradores possam ler e modificar todos os dados
  await executeSQL(`
    CREATE POLICY "Administradores t√™m acesso completo" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas espec√≠ficas para administradores configuradas para tabela: ${tableName}`);
}

// Configurar pol√≠ticas padr√£o
async function setupDefaultPolicies(tableName: string): Promise<void> {
  // Pol√≠tica para leitura por usu√°rios autenticados
  await executeSQL(`
    CREATE POLICY "Usu√°rios autenticados podem ler" ON "${tableName}"
    FOR SELECT
    USING (auth.uid() IS NOT NULL);
  `);
  
  // Pol√≠tica para que administradores possam ler e modificar todos os dados
  await executeSQL(`
    CREATE POLICY "Administradores t√™m acesso completo" ON "${tableName}"
    FOR ALL
    USING (
      (SELECT role FROM users WHERE id = auth.uid()) = 'admin'
    );
  `);
  
  console.log(`‚úÖ Pol√≠ticas padr√£o configuradas para tabela: ${tableName}`);
}

// Fun√ß√£o principal de configura√ß√£o RLS
async function setupRLS(): Promise<void> {
  console.log("\nüîí Iniciando configura√ß√£o de RLS no Supabase...");
  
  try {
    // Listar todas as tabelas no banco de dados
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .not('table_name', 'ilike', 'pg_%')
      .not('table_name', 'ilike', 'drizzle_%');
    
    if (tablesError) {
      throw tablesError;
    }
    
    if (!tables || tables.length === 0) {
      console.log("‚ö†Ô∏è Nenhuma tabela encontrada no banco de dados.");
      return;
    }
    
    console.log(`\nüìä Total de tabelas encontradas: ${tables.length}`);
    
    // Configurar RLS para cada tabela
    for (const table of tables) {
      await setupRLSForTable(table.table_name);
    }
    
    console.log("\n‚úÖ Configura√ß√£o de RLS conclu√≠da com sucesso!");
  } catch (error) {
    console.error("\n‚ùå Erro durante a configura√ß√£o de RLS:", error);
    process.exit(1);
  }
}

// Executar configura√ß√£o RLS
setupRLS().catch(console.error);