/**
 * Este script atualiza a estrutura da tabela de usu√°rios para incluir
 * o campo de senha e auth_id, necess√°rios para a integra√ß√£o com o sistema
 * de autentica√ß√£o do Supabase.
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';

// Carregar vari√°veis de ambiente do arquivo .env
dotenv.config();

// URL e chave de API do Supabase
const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_SERVICE_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Erro: SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o necess√°rios no arquivo .env');
  process.exit(1);
}

// Criar cliente Supabase com a chave de servi√ßo (service key) que ignora RLS
const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Atualiza a estrutura da tabela de usu√°rios
 */
async function updateUsersTable() {
  try {
    console.log('Verificando a estrutura da tabela users...');
    
    // Verificar se a coluna auth_id existe
    const hasAuthIdColumn = await checkColumnExists('users', 'auth_id');
    if (!hasAuthIdColumn) {
      console.log('Adicionando coluna auth_id √† tabela users...');
      await executeSQL(`
        ALTER TABLE public.users
        ADD COLUMN auth_id UUID UNIQUE;
      `);
      console.log('‚úÖ Coluna auth_id adicionada com sucesso!');
    } else {
      console.log('‚úÖ Coluna auth_id j√° existe na tabela users');
    }
    
    // Verificar se a coluna password existe
    const hasPasswordColumn = await checkColumnExists('users', 'password');
    if (!hasPasswordColumn) {
      console.log('Adicionando coluna password √† tabela users...');
      await executeSQL(`
        ALTER TABLE public.users
        ADD COLUMN password VARCHAR NOT NULL DEFAULT 'placeholder';
      `);
      console.log('‚úÖ Coluna password adicionada com sucesso!');
    } else {
      console.log('‚úÖ Coluna password j√° existe na tabela users');
    }
    
    // Verificar se h√° usu√°rios que precisam ser migrados para o sistema de autentica√ß√£o
    await migrateExistingUsers();
    
    console.log('‚úÖ Atualiza√ß√£o da tabela users conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro ao atualizar a tabela users:', error);
    process.exit(1);
  }
}

/**
 * Verifica se uma coluna espec√≠fica existe em uma tabela
 */
async function checkColumnExists(tableName, columnName) {
  try {
    const { data, error } = await supabase.rpc('check_column_exists', { 
      table_name: tableName,
      column_name: columnName
    });
    
    if (error) {
      console.error(`Erro ao verificar se a coluna ${columnName} existe na tabela ${tableName}:`, error);
      
      // Se a fun√ß√£o RPC n√£o existir, tentar verificar de outra forma
      const { data: columns, error: columnsError } = await supabase
        .from('information_schema.columns')
        .select('column_name')
        .eq('table_name', tableName)
        .eq('column_name', columnName);
      
      if (columnsError) {
        console.error('Erro alternativo ao verificar coluna:', columnsError);
        return false;
      }
      
      return columns && columns.length > 0;
    }
    
    return data;
  } catch (error) {
    console.error(`‚ùå Erro ao verificar a exist√™ncia da coluna ${columnName}:`, error);
    return false;
  }
}

/**
 * Migra usu√°rios existentes para o sistema de autentica√ß√£o do Supabase
 */
async function migrateExistingUsers() {
  try {
    console.log('Verificando usu√°rios existentes para migra√ß√£o...');
    
    // Obter usu√°rios que n√£o t√™m auth_id
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .is('auth_id', null);
    
    if (error) {
      console.error('Erro ao obter usu√°rios para migra√ß√£o:', error);
      return;
    }
    
    if (!users || users.length === 0) {
      console.log('‚úÖ N√£o h√° usu√°rios para migrar');
      return;
    }
    
    console.log(`Encontrados ${users.length} usu√°rios para migrar para o sistema de autentica√ß√£o`);
    
    // Migrar cada usu√°rio
    for (const user of users) {
      try {
        console.log(`Migrando usu√°rio: ${user.username}`);
        
        // Gerar uma senha tempor√°ria forte para o usu√°rio
        const tempPassword = Math.random().toString(36).slice(-10) + Math.random().toString(36).slice(-10).toUpperCase();
        
        // Criar usu√°rio no sistema de autentica√ß√£o do Supabase
        const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
          email: user.email || `${user.username}@example.com`,
          password: tempPassword,
          email_confirm: true,
          user_metadata: {
            username: user.username,
            name: user.name,
            phone: user.phone
          }
        });
        
        if (authError) {
          console.error(`‚ùå Erro ao criar usu√°rio ${user.username} no sistema de autentica√ß√£o:`, authError);
          continue;
        }
        
        if (!authUser || !authUser.user || !authUser.user.id) {
          console.error(`‚ùå Erro ao obter ID de autentica√ß√£o para o usu√°rio ${user.username}`);
          continue;
        }
        
        // Gerar hash da senha tempor√°ria
        const hashedPassword = await bcrypt.hash(tempPassword, 10);
        
        // Atualizar o usu√°rio com o auth_id e senha hash
        const { error: updateError } = await supabase
          .from('users')
          .update({
            auth_id: authUser.user.id,
            password: hashedPassword
          })
          .eq('id', user.id);
        
        if (updateError) {
          console.error(`‚ùå Erro ao atualizar usu√°rio ${user.username} com o auth_id:`, updateError);
          
          // Tentar reverter a cria√ß√£o do usu√°rio de autentica√ß√£o em caso de falha
          try {
            await supabase.auth.admin.deleteUser(authUser.user.id);
          } catch (deleteError) {
            console.error(`‚ùå Erro ao tentar reverter a cria√ß√£o do usu√°rio de autentica√ß√£o para ${user.username}:`, deleteError);
          }
          
          continue;
        }
        
        console.log(`‚úÖ Usu√°rio ${user.username} migrado com sucesso!`);
        
        // Imprimir a senha tempor√°ria - o usu√°rio precisar√° redefinir
        console.log(`üîë Senha tempor√°ria para ${user.username}: ${tempPassword}`);
        console.log(`‚ö†Ô∏è O usu√°rio dever√° redefinir a senha na pr√≥xima vez que fizer login.`);
      } catch (userError) {
        console.error(`‚ùå Erro ao migrar usu√°rio ${user.username}:`, userError);
      }
    }
    
    console.log('‚úÖ Migra√ß√£o de usu√°rios conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o de usu√°rios:', error);
    throw error;
  }
}

/**
 * Executa um comando SQL no banco de dados
 */
async function executeSQL(sql) {
  try {
    console.log(`Executando SQL: ${sql.substring(0, 100)}${sql.length > 100 ? '...' : ''}`);
    
    // Para executar o SQL para atualizar a estrutura da tabela, 
    // precisamos do privil√©gio de administrador no banco de dados
    // ou da fun√ß√£o RPC execute_sql
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao executar SQL:`, error);
    throw error;
  }
}

// Executar o script
updateUsersTable().catch(error => {
  console.error('‚ùå Erro durante execu√ß√£o do script:', error);
  process.exit(1);
});