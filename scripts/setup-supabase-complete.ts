import { execSync } from 'child_process';
import * as dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

/**
 * Script para configura√ß√£o completa do Supabase
 * Executa todos os scripts de configura√ß√£o em sequ√™ncia
 */
async function setupSupabaseComplete() {
  console.log('\nüöÄ Iniciando configura√ß√£o completa do Supabase...\n');

  try {
    // 1. Verificar conex√£o com o Supabase
    console.log('1Ô∏è‚É£ Verificando conex√£o com o Supabase...');
    runScript('./scripts/debug-supabase-connection.ts');
    
    // 2. Sincronizar autentica√ß√£o com Supabase
    console.log('\n2Ô∏è‚É£ Sincronizando autentica√ß√£o com Supabase Auth...');
    runScript('./scripts/sync-auth-with-supabase.ts');
    
    // 3. Inicializar banco de dados (se necess√°rio)
    console.log('\n3Ô∏è‚É£ Verificando e inicializando banco de dados...');
    // O script debug-supabase-connection j√° mostrou que as tabelas existem
    // N√£o precisamos executar init-supabase-db.ts
    console.log('‚úÖ Tabelas j√° existem no Supabase, pulando inicializa√ß√£o');
    
    // 4. Configurar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Configurando pol√≠ticas de seguran√ßa RLS...');
    runScript('./scripts/setup-rls.ts');
    
    // 5. Verificar configura√ß√£o
    console.log('\n5Ô∏è‚É£ Verificando configura√ß√£o final...');
    runScript('./scripts/verify-supabase-db.ts');
    
    console.log("\nüéâ Configura√ß√£o completa do Supabase finalizada com sucesso!\n");
    console.log("\nüìù Pr√≥ximos passos:");
    console.log("1. Execute a aplica√ß√£o com 'npm run dev'");
    console.log("2. Utilize os scripts na pasta 'scripts' para outras opera√ß√µes espec√≠ficas");
    console.log("3. Para popular o banco com dados de exemplo, crie e execute um script de popula√ß√£o de dados");
    
  } catch (error) {
    console.error("\n‚ùå Erro durante a configura√ß√£o:", error);
    process.exit(1);
  }
}

/**
 * Fun√ß√£o auxiliar para executar um script TypeScript
 */
function runScript(scriptPath: string) {
  try {
    // Usar execSync para que seja executado de forma s√≠ncrona
    execSync(`npx tsx ${scriptPath}`, { stdio: 'inherit' });
  } catch (error) {
    console.error(`\n‚ùå Erro ao executar o script ${scriptPath}:`, error);
    throw error; // Re-lan√ßar o erro para ser capturado na fun√ß√£o principal
  }
}

// Executar a fun√ß√£o principal
setupSupabaseComplete().catch(error => {
  console.error('Erro fatal durante a configura√ß√£o completa:', error);
  process.exit(1);
});