/**
 * Script de configura√ß√£o completa do Supabase
 * 
 * Este script executa todos os passos necess√°rios para configurar
 * completamente o Supabase como banco de dados do projeto.
 */

import { spawn } from 'child_process';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Verificar se as vari√°veis de ambiente necess√°rias est√£o configuradas
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const DATABASE_URL = process.env.DATABASE_URL;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !DATABASE_URL) {
  console.error("‚ùå Erro: As vari√°veis de ambiente SUPABASE_URL, SUPABASE_SERVICE_KEY e DATABASE_URL s√£o necess√°rias");
  process.exit(1);
}

// Fun√ß√£o para executar um script TypeScript
async function runScript(scriptPath: string): Promise<boolean> {
  return new Promise((resolve) => {
    console.log(`\nüöÄ Executando script: ${scriptPath}...\n`);
    
    const child = spawn('tsx', [scriptPath], { stdio: 'inherit' });
    
    child.on('close', (code) => {
      if (code === 0) {
        console.log(`\n‚úÖ Script ${scriptPath} executado com sucesso!\n`);
        resolve(true);
      } else {
        console.error(`\n‚ùå Script ${scriptPath} falhou com c√≥digo ${code}\n`);
        resolve(false);
      }
    });
  });
}

// Fun√ß√£o principal para executar todos os scripts
async function setupSupabaseComplete() {
  console.log("\nüîÑ Iniciando configura√ß√£o completa do Supabase...\n");
  
  try {
    // Passo 1: Verificar conex√£o com o Supabase
    console.log("\nüì° PASSO 1: Verificando conex√£o com o Supabase...\n");
    const connectionSuccess = await runScript('./scripts/debug-supabase-connection.ts');
    
    if (!connectionSuccess) {
      console.error("\n‚ùå Falha na conex√£o com o Supabase. Verifique as credenciais e tente novamente.\n");
      process.exit(1);
    }
    
    // Passo 2: Inicializar banco de dados no Supabase
    console.log("\nüìä PASSO 2: Inicializando banco de dados no Supabase...\n");
    const initSuccess = await runScript('./scripts/init-supabase-db.ts');
    
    if (!initSuccess) {
      console.error("\n‚ùå Falha na inicializa√ß√£o do banco de dados. Verifique os logs para mais detalhes.\n");
      process.exit(1);
    }
    
    // Passo 3: Configurar pol√≠ticas RLS
    console.log("\nüîí PASSO 3: Configurando pol√≠ticas de seguran√ßa RLS...\n");
    const rlsSuccess = await runScript('./scripts/setup-rls.ts');
    
    if (!rlsSuccess) {
      console.error("\n‚ö†Ô∏è Houve problemas na configura√ß√£o das pol√≠ticas RLS. Verifique os logs para mais detalhes.\n");
      // Continuar mesmo com erro nas pol√≠ticas RLS
    }
    
    // Passo 4: Verificar a configura√ß√£o do banco de dados
    console.log("\nüîç PASSO 4: Verificando configura√ß√£o do banco de dados...\n");
    await runScript('./scripts/verify-supabase-db.ts');
    
    console.log("\nüéâ Configura√ß√£o completa do Supabase finalizada com sucesso!\n");
    console.log("\nüìù Pr√≥ximos passos:");
    console.log("1. Execute a aplica√ß√£o com 'npm run dev'");
    console.log("2. Utilize os scripts na pasta 'scripts' para outras opera√ß√µes espec√≠ficas");
    console.log("3. Para popular o banco com dados de exemplo, execute 'npm run populate:supabase'");
    
  } catch (error) {
    console.error("\n‚ùå Erro durante a configura√ß√£o do Supabase:", error);
    process.exit(1);
  }
}

// Executar o script
setupSupabaseComplete().catch(console.error);