/**
 * Script para verificar o status da autentica√ß√£o no Supabase
 * para diagnosticar problemas de acesso √†s APIs
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Verificar se as vari√°veis de ambiente est√£o definidas
if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
  console.error('Erro: Vari√°veis de ambiente SUPABASE_URL e/ou SUPABASE_ANON_KEY n√£o definidas.');
  console.error('Certifique-se de que as vari√°veis de ambiente est√£o configuradas no arquivo .env');
  process.exit(1);
}

// Criar cliente Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function checkAuthStatus() {
  console.log('Verificando status de autentica√ß√£o no Supabase...');
  console.log('URL do Supabase:', process.env.SUPABASE_URL);
  
  try {
    // Verificar usu√°rio atual (se houver)
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.error('Erro ao verificar usu√°rio atual:', error.message);
      return;
    }
    
    if (user) {
      console.log('‚úÖ Usu√°rio autenticado:');
      console.log(`- ID de autentica√ß√£o: ${user.id}`);
      console.log(`- Email: ${user.email}`);
      console.log(`- Criado em: ${user.created_at ? new Date(user.created_at).toLocaleString() : 'N/A'}`);
      
      // Verificar sess√£o
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('Erro ao verificar sess√£o:', sessionError.message);
      } else if (session) {
        console.log('‚úÖ Sess√£o ativa:');
        console.log(`- Expira em: ${new Date(session.expires_at * 1000).toLocaleString()}`);
        
        // Testar acesso √† API de agendamentos
        console.log('\nTestando acesso √† API de agendamentos...');
        
        const { data: appointments, error: appointmentsError } = await supabase
          .from('appointments')
          .select('*')
          .limit(5);
        
        if (appointmentsError) {
          console.error('‚ùå Erro ao acessar agendamentos:', appointmentsError.message);
          
          if (appointmentsError.message.includes('permission denied')) {
            console.log('\nüîë SOLU√á√ÉO: O usu√°rio autenticado n√£o tem permiss√£o para acessar a tabela appointments.');
            console.log('Verifique as pol√≠ticas RLS (Row Level Security) no Supabase para esta tabela.');
          }
        } else {
          console.log(`‚úÖ Acesso concedido! Encontrados ${appointments.length} agendamentos.`);
          if (appointments.length > 0) {
            console.log('\nExemplo de agendamento:');
            console.log(appointments[0]);
          }
        }
      } else {
        console.log('‚ùå Nenhuma sess√£o ativa encontrada.');
      }
    } else {
      console.log('‚ùå Nenhum usu√°rio autenticado.');
      
      // Criar usu√°rio test para teste (apenas se necess√°rio)
      console.log('\nDeseja criar um usu√°rio de teste para diagnosticar problemas de autentica√ß√£o?');
      console.log('Execute o seguinte comando se desejar:');
      console.log('node -e "require(\'./check-auth-status.js\').createTestUser()"');
    }
  } catch (error) {
    console.error('Erro geral:', error);
  }
}

// Fun√ß√£o para criar um usu√°rio de teste, caso seja necess√°rio
async function createTestUser() {
  const testEmail = `test_${Date.now()}@example.com`;
  const testPassword = 'Test123456!';
  
  console.log(`Criando usu√°rio de teste com email: ${testEmail}`);
  
  try {
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword
    });
    
    if (error) {
      console.error('Erro ao criar usu√°rio de teste:', error.message);
      return;
    }
    
    console.log('‚úÖ Usu√°rio de teste criado com sucesso!');
    console.log('- Email:', testEmail);
    console.log('- Senha:', testPassword);
    console.log('\nFa√ßa login com estas credenciais para testar a autentica√ß√£o.');
  } catch (error) {
    console.error('Erro geral ao criar usu√°rio de teste:', error);
  }
}

// Executar verifica√ß√£o
checkAuthStatus();

// Exportar a fun√ß√£o createTestUser para uso externo
module.exports = { createTestUser };